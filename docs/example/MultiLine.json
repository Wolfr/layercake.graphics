{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg, Html } from 'layercake';\n\n  import fruit from './data/fruit.csv';\n  import MultiLine from './components/MultiLine.svelte';\n  import AxisX from './components/AxisX.svelte';\n  import AxisY from './components/AxisY.svelte';\n  import Labels from './components/Labels.svelte';\n  // import Tooltip from './components/Tooltip.Svelte';\n\n  const fruitLong = Object.keys(fruit[0]).map(key => {\n    if (key === 'month') return null;\n    return {\n      key,\n      values: fruit.map(d => {\n        return { key, month: new Date(d.month), value: +d[key] };\n      })\n    };\n  }).filter(d => d);\n\n  // Make a flat array of the `values` of our nested series\n  // we can pluck the `value` field from each item in the array to measure extents\n  const flatten = data => data.reduce((store, group) => store.concat(group.values), []);\n\n  const monthNames = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec.'];\n\n  function formatTickX (d) {\n    const date = new Date(d);\n    return `${monthNames[date.getMonth()]} ${date.getDate()}`;\n  }\n\n  function formatTickY (d) {\n    if (d > 999) {\n      return d / 1000 + 'k';\n    }\n    return d;\n  }\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ top: 7, right: 10, bottom: 20, left: 25 }}\n    x={'month'}\n    y={'value'}\n    flatData={flatten(fruitLong)}\n    yDomain={[0, null]}\n    data={fruitLong}\n  >\n    <Svg>\n      <AxisX\n        gridlines={false}\n        tickNumber={3}\n        formatTick={formatTickX}\n      />\n      <AxisY\n        formatTick={formatTickY}\n      />\n\n      <MultiLine/>\n    </Svg>\n\n    <Html>\n      <Labels/>\n    </Html>\n  </LayerCake>\n</div>"},"dek":"A fancy example with a quadtree tooltip lines that change their z-position based on whichever has the highest value at that hover position.\n","components":[{"title":"./components/MultiLine.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet } = getContext('LayerCake');\n\n  const colorLookup = {\n    apples: '#ffe4b8',\n    bananas: '#ffb3c0',\n    cherries: '#ff7ac7',\n    dates: '#ff00cc'\n  };\n\n  $: path = values => {\n    return 'M' + values\n      .map(d => {\n        return $xGet(d) + ',' + $yGet(d);\n      })\n      .join('L');\n  };\n</script>\n\n<g class=\"line-group\">\n  {#each $data as group}\n    <path\n      class='path-line'\n      d='{path(group.values)}'\n      stroke=\"{colorLookup[group.key]}\"\n    ></path>\n  {/each}\n</g>\n\n<style>\n  .path-line {\n    fill: none;\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 3px;\n  }\n</style>"},{"title":"./components/AxisX.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks;\n  export let tickNumber;\n\n  $: tickVals = ticks || $xScale.ticks(tickNumber);\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n{#if $xScale}\n  <g class='axis x-axis'>\n    {#each tickVals as tick, i}\n      <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n        {#if gridlines !== false}\n          <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n        {/if}\n        <text y='16' text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n      </g>\n    {/each}\n    {#if baseline === true}\n      <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n    {/if}\n  </g>\n{/if}\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, yScale } = getContext('LayerCake');\n\n  export let ticks;\n  export let tickNumber = 5;\n  export let gridlines = true;\n  export let formatTick = d => d;\n\n</script>\n\n<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each $yScale.ticks(ticks || tickNumber) as tick, i}\n    <g class='tick tick-{tick}' transform='translate(0, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line x2='100%'></line>\n      {/if}\n      <text y='-4'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./components/Labels.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { data, x, xGet, yGet } = getContext('LayerCake');\n\n  function pretty (val) {\n    return val.charAt(0).toUpperCase() + val.slice(1, val.length);\n  }\n\n  // Get the data for the last row (highest x-value)\n  $: max = values => {\n    let d;\n    let m = -Infinity;\n    let i = 0;\n    while (i < values.length) {\n      const val = $x(values[i]);\n      if (val > m) {\n        m = val;\n        d = values[i];\n      }\n      i += 1;\n    }\n    return d;\n  }\n\n  $: left = values => $xGet(max(values));\n  $: top = values => $yGet(max(values));\n</script>\n\n{#each $data as group}\n  <div\n    class=\"label\"\n    style=\"top:{top(group.values)}px;left:{left(group.values)}px;\"\n  >{pretty(group.key)}</div>\n{/each}\n\n<style>\n  .label {\n    position: absolute;\n    transform: translate(-100%, -100%)translateY(1px);\n    font-size: 13px;\n  }\n</style>"}],"modules":[],"componentModules":[],"csvs":[{"title":"./data/fruit.csv","contents":"month,apples,bananas,cherries,dates\n2015-04-1,3840,1920,960,400\n2015-03-1,1600,1440,960,400\n2015-02-1,640,960,640,400\n2015-01-1,320,480,640,400"}]}