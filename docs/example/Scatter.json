{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg, Canvas } from 'layercake';\n\n  import points from './data/points.csv';\n  import Scatter from './components/Scatter.svelte';\n  import ScatterCanvas from './components/ScatterCanvas.svelte';\n  import Voronoi from './components/Voronoi.svelte';\n  import AxisX from './components/AxisX.svelte';\n  import AxisY from './components/AxisY.svelte';\n\n  points.forEach(row => {\n    row.myY = +row.myY;\n  });\n\n  const r = 3;\n  const padding = 10;\n  const color = '#fff';\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ top: 10, right: 5, bottom: 20, left: 25 }}\n    x={'myX'}\n    y={'myY'}\n    xPadding={[padding, padding]}\n    yPadding={[padding, padding]}\n    data={points}\n  >\n\n    <Svg>\n      <AxisX/>\n      <AxisY/>\n    </Svg>\n\n    <Canvas>\n      <ScatterCanvas\n        r={r * 1.5}\n        fill={'#0cf'}\n      />\n    </Canvas>\n\n    <Svg>\n      <Scatter\n        {r}\n        fill={color}\n      />\n      <Voronoi/>\n    </Svg>\n  </LayerCake>\n</div>"},"dek":"","components":[{"title":"./components/Scatter.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet } = getContext('LayerCake');\n\n  export let r = 5;\n  export let fill = '#000';\n</script>\n\n<g class=\"scatter-group\">\n  {#each $data as d}\n    <circle\n      cx={$xGet(d)}\n      cy={$yGet(d)}\n      {r}\n      {fill}\n    />\n  {/each}\n</g>"},{"title":"./components/ScatterCanvas.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n  import { scaleCanvas } from 'layercake';\n\n  const { data, xGet, yGet, width, height } = getContext('LayerCake');\n\n  const { ctx } = getContext('ctx');\n\n  export let r;\n  export let fill;\n\n  $: {\n    if ($ctx) {\n      /* --------------------------------------------\n       * If you were to have multiple canvas layers\n       * maybe for some artistic layering purposes\n       * put these reset functions in the first layer, not each one\n       * since they should only run once per update\n       */\n      scaleCanvas($ctx, $width, $height);\n      $ctx.clearRect(0, 0, $width, $height);\n\n      /* --------------------------------------------\n       * Draw our scatterplot\n       */\n      $data.forEach(d => {\n        $ctx.beginPath();\n        $ctx.arc($xGet(d), $yGet(d), r, 0, 2 * Math.PI, false);\n        $ctx.fillStyle = fill;\n        $ctx.fill();\n      });\n    }\n  }\n</script>"},{"title":"./components/Voronoi.svelte","contents":"<script>\n  import { Delaunay } from 'd3-delaunay';\n  import { getContext } from 'svelte';\n  import { uniques } from 'layercake';\n\n  const { data, xGet, yGet, width, height } = getContext('LayerCake');\n\n  function log (point) {\n    console.log(point, point.data);\n  }\n\n  $: points = $data.map(d => {\n    const point = [$xGet(d), $yGet(d)];\n    point.data = d;\n    return point;\n  });\n\n  $: uniquePoints = uniques(points, d => d.join(), false);\n\n  $: voronoi = Delaunay.from(points).voronoi([0, 0, $width, $height]);\n\n</script>\n\n<style>\n  .voronoi-cell {\n    fill: none;\n    stroke: none;\n    pointer-events: all;\n  }\n\n  .voronoi-cell:hover {\n    stroke: #000;\n  }\n</style>\n\n{#each uniquePoints as point, i}\n  <path class=\"voronoi-cell\" d={voronoi.renderCell(i)} on:mouseover=\"{log(point)}\"></path>\n{/each}"},{"title":"./components/AxisX.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks;\n  export let tickNumber;\n\n  $: tickVals = ticks || $xScale.ticks(tickNumber);\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'end';\n      }\n      if (i === tickVals.length - 1) {\n        return 'start';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n{#if $xScale}\n  <g class='axis x-axis'>\n    {#each tickVals as tick, i}\n      <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n        {#if gridlines !== false}\n          <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n        {/if}\n        <text y='16' text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n      </g>\n    {/each}\n    {#if baseline === true}\n      <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n    {/if}\n  </g>\n{/if}\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, yScale } = getContext('LayerCake');\n\n  export let ticks;\n  export let tickNumber = 5;\n  export let gridlines = true;\n  export let formatTick = d => d;\n\n</script>\n\n<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each $yScale.ticks(ticks || tickNumber) as tick, i}\n    <g class='tick tick-{tick}' transform='translate(0, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line x2='100%'></line>\n      {/if}\n      <text y='-4'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"csvs":[{"title":"./data/points.csv","contents":"myX,myY\n1979,7.19\n1980,7.83\n1981,7.24\n1982,7.44\n1983,7.51\n1984,7.1\n1985,6.91\n1986,7.53\n1987,7.47\n1988,7.48\n1989,7.03\n1990,6.23\n1991,6.54\n1992,7.54\n1993,6.5\n1994,7.18\n1995,6.12\n1996,7.87\n1997,6.73\n1998,6.55\n1999,6.23\n2000,6.31\n2001,6.74\n2002,5.95\n2003,6.13\n2004,6.04\n2005,5.56\n2006,5.91\n2007,4.29\n2008,4.72\n2009,5.38\n2010,4.92\n2011,4.61\n2012,3.62\n2013,5.35\n2014,5.28\n2015,4.63\n2016,4.72"}]}