{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg } from 'layercake';\n  import { scaleLinear } from 'd3-scale';\n\n  import points from './data/radarScores.csv';\n  import Radar from './components/Radar.svelte';\n  import AxisRadial from './components/AxisRadial.svelte';\n\n  const seriesNames = Object.keys(points[0]).filter(d => d !== 'name');\n\n  points.forEach(row => {\n    seriesNames.forEach(name => {\n      row[name] = +row[name];\n    });\n  });\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ top: 30, right: 0, bottom: 7, left: 0 }}\n    r={['fastball', 'change', 'slider', 'cutter', 'curve']}\n    rScale={scaleLinear()}\n    rRange={({ height }) => [0, height / 2]}\n    rDomain={[0, 10]}\n    data={points}\n  >\n    <Svg>\n      <AxisRadial/>\n      <Radar/>\n    </Svg>\n  </LayerCake>\n</div>"},"dek":"","components":[{"title":"./components/Radar.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n  import { line, curveCardinalClosed } from 'd3-shape';\n\n  const { data, width, height, rGet, originalSettings } = getContext('LayerCake');\n\n  $: angleSlice = (Math.PI * 2) / $originalSettings.r.length;\n\n  $: path = line()\n    .curve(curveCardinalClosed)\n    .x((d, i) => d * Math.cos(angleSlice * i - Math.PI / 2))\n    .y((d, i) => d * Math.sin(angleSlice * i - Math.PI / 2));\n\n  $: cx = (circleR, i) => circleR * Math.cos(angleSlice * i - Math.PI / 2)\n  $: cy = (circleR, i) => circleR * Math.sin(angleSlice * i - Math.PI / 2)\n\n  /* The non-D3 line generator way. Use `d={path}` in the template below */\n  // $: path = 'M' + $data\n  //   .map(d => {\n  //     return $rGet(d).map((val, i) => {\n  //       return [\n  //         val * Math.cos(angleSlice * i - Math.PI / 2),\n  //         val * Math.sin(angleSlice * i - Math.PI / 2)\n  //       ].join(',');\n  //     });\n  //   })\n  //   .join('L') + 'z';\n</script>\n\n<g\n  transform=\"translate({ $width / 2 }, { $height / 2 })\"\n>\n  {#each $data as row}\n    <!-- Draw a line connecting all the dots -->\n    <path\n      class='path-line'\n      d='{path($rGet(row))}'\n      stroke=\"#f0c\"\n      fill=\"#f0c\"\n      fill-opacity=\"0.5\"\n    ></path>\n\n    <!-- Plot each dots -->\n    {#each $rGet(row) as circleR, i}\n      <circle\n        cx={cx(circleR, i)}\n        cy={cy(circleR, i)}\n        r=\"4.5\"\n        fill=\"#f0c\"\n        stroke=\"#fff\"\n        stroke-width=\"1\"\n      ></circle>\n    {/each}\n  {/each}\n</g>\n\n<style>\n  .path-line {\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 2;\n  }\n</style>"},{"title":"./components/AxisRadial.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, rScale, extents, originalSettings } = getContext('LayerCake');\n\n  export let linePaddingFactor = 1.1;\n  export let labelPaddingFactor = 1.25;\n\n  $: max = $rScale(Math.max(...$extents.r));\n\n  $: angleSlice = (Math.PI * 2) / $originalSettings.r.length;\n\n  function anchor (total, i) {\n    if (i === 0 || i === total / 2) {\n      return 'middle';\n    } else if (i < total / 2) {\n      return 'start';\n    }\n    return 'end';\n  }\n</script>\n\n<g\n  transform=\"translate({ $width / 2 }, { $height / 2 })\"\n>\n  <circle\n    cx=\"0\"\n    cy=\"0\"\n    r=\"{max}\"\n    stroke=\"#ccc\"\n    stroke-width=\"1\"\n    fill=\"#CDCDCD\"\n    fill-opacity=\"0.1\"\n  ></circle>\n  <circle\n    cx=\"0\"\n    cy=\"0\"\n    r=\"{max / 2}\"\n    stroke=\"#ccc\"\n    stroke-width=\"1\"\n    fill=\"none\"\n  ></circle>\n\n  {#each $originalSettings.r as label, i}\n    <line\n      x1=\"0\"\n      y1=\"0\"\n      x2=\"{(max * linePaddingFactor) * Math.cos(angleSlice * i - Math.PI / 2)}\"\n      y2=\"{(max * linePaddingFactor) * Math.sin(angleSlice * i - Math.PI / 2)}\"\n      stroke=\"#ccc\"\n      stroke-width=\"1\"\n      fill=\"none\"\n    >\n    </line>\n    <text\n      text-anchor=\"{anchor($originalSettings.r.length, i)}\"\n      dy=\"0.35em\"\n      font-size=\"12px\"\n      text-outline=\"#fff\"\n      transform=\"translate({(max * labelPaddingFactor) * Math.cos(angleSlice * i - Math.PI / 2)}, {(max * labelPaddingFactor) * Math.sin(angleSlice * i - Math.PI / 2)})\">{label}</text>\n  {/each}\n</g>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/radarScores.csv","contents":"name,fastball,change,slider,cutter,curve\nAllison,10,0,4,8,5"}]}