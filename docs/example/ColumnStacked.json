{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg, flatten, uniques } from 'layercake';\n  import { stack } from 'd3-shape';\n  import { scaleBand } from 'd3-scale';\n\n  import fruit from './data/fruitOrdinal.js';\n  import ColumnStacked from './components/ColumnStacked.svelte';\n  import AxisXScaleBand from './components/AxisXScaleBand.svelte';\n  import AxisY from './components/AxisY.svelte';\n\n  const seriesNames = Object.keys(fruit[0]).filter(d => d !== 'year');\n\n  const stackData = stack()\n    .keys(seriesNames);\n\n  const series = stackData(fruit);\n\n  function formatTickY (d) {\n    if (d > 999) {\n      return Math.round(d / 1000) + 'k';\n    }\n    return d;\n  }\n\n  const seriesColors = ['#00e047', '#7ceb68', '#b7f486', '#ecfda5'];\n\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n       padding={{ top: 0, right: 0, bottom: 20, left: 20 }}\n       x={d => d.data.year}\n       y={[0, 1]}\n       xScale={scaleBand().paddingInner([0.02]).round(true)}\n       xDomain={uniques(fruit, 'year')}\n       flatData={flatten(series)}\n       data={series}\n       custom={{ seriesNames }}\n  >\n    <Svg>\n      <AxisXScaleBand\n        gridlines={false}\n      />\n      <AxisY\n        gridlines={false}\n        formatTick={formatTickY}\n      />\n      <ColumnStacked\n        {seriesColors}\n      />\n    </Svg>\n  </LayerCake>\n\n</div>"},"dek":"","components":[{"title":"./components/ColumnStacked.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n  import { scaleOrdinal } from 'd3-scale';\n\n  export let seriesColors;\n\n  const { data, xGet, yGet, xScale, custom } = getContext('LayerCake');\n\n  $: columnHeight = d => {\n    const yVals = $yGet(d);\n    return yVals[0] - yVals[1];\n  };\n\n  const colorScale = scaleOrdinal()\n    .domain($custom.seriesNames)\n    .range(seriesColors);\n</script>\n\n<g class=\"column-group\">\n  {#each $data as series, i}\n    {#each series as d}\n      <rect\n        class='group-rect'\n        data-id=\"{i}\"\n        x=\"{$xGet(d)}\"\n        y=\"{$yGet(d)[1]}\"\n        width={$xScale.bandwidth()}\n        height=\"{columnHeight(d)}\"\n        fill={colorScale(series.key)}\n      ></rect>\n    {/each}\n  {/each}\n</g>"},{"title":"./components/AxisXScaleBand.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { height, xScale, yScale } = getContext('LayerCake');\n\n  export let formatTick = d => d;\n  export let gridlines = true;\n\n</script>\n\n<g class='axis x-axis'>\n  {#each $xScale.domain() as tick}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n      {#if gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text y='16' x=\"{$xScale.bandwidth() / 2}\">{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n\n  .x-axis .tick text {\n    text-anchor: middle;\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, yScale } = getContext('LayerCake');\n\n  export let ticks;\n  export let tickNumber = 5;\n  export let gridlines = true;\n  export let formatTick = d => d;\n\n</script>\n\n<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each $yScale.ticks(ticks || tickNumber) as tick, i}\n    <g class='tick tick-{tick}' transform='translate(0, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line x2='100%'></line>\n      {/if}\n      <text y='-4'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[{"title":"./data/fruitOrdinal.js","contents":"/* --------------------------------------------\n *\n * Example data for stacked charts\n * from D3 documentation\n * Adapted from https://github.com/d3/d3-shape/blob/master/README.md#stack\n *\n * --------------------------------------------\n */\nexport default [\n  {year: '2019', apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n  {year: '2018', apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n  {year: '2017', apples: 820, bananas: 1000, cherries: 640, dates: 400},\n  {year: '2016', apples: 820, bananas: 560, cherries: 720, dates: 400}\n];"}],"componentModules":[]}