{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg, flatten } from 'layercake';\n  import { stack } from 'd3-shape';\n  import fruit from './data/fruit.js';\n  import AxisX from './components/AxisX.svelte';\n  import AxisY from './components/AxisY.svelte';\n  import AreaStacked from './components/AreaStacked.svelte';\n\n  const seriesNames = Object.keys(fruit[0]).filter(d => d !== 'month');\n\n  const seriesColors = ['#ff00cc', '#ff7ac7', '#ffb3c0', '#ffe4b8'];\n\n  /* --------------------------------------------\n   * Create a stacked data structure\n   */\n  const stackData = stack()\n    .keys(seriesNames);\n\n  const series = stackData(fruit);\n\n  const monthNames = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec.'];\n\n  function formatTickX (d) {\n    const date = new Date(d);\n    return `${monthNames[date.getMonth()]} ${date.getDate()}`;\n  }\n\n  function formatTickY (d) {\n    if (d > 999) {\n      return Math.round(d / 1000) + 'k';\n    }\n    return d;\n  }\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ top: 0, right: 0, bottom: 20, left: 17 }}\n    x={d => d.data.month}\n    y={[0, 1]}\n    flatData={flatten(series)}\n    data={series}\n  >\n    <Svg>\n      <AxisX\n        formatTick={formatTickX}\n      />\n      <AxisY\n        formatTick={formatTickY}\n      />\n      <AreaStacked\n        {seriesColors}\n        {seriesNames}\n      />\n    </Svg>\n  </LayerCake>\n</div>"},"dek":"Stack area charts using D3's [stack](https://github.com/d3/d3-shape#stacks) function. Because this will create a nested data structure, we use LayerCake's `flatten` function and the `flatData` option from which we measure the extents.\n","components":[{"title":"./components/AxisX.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks;\n  export let tickNumber;\n\n  $: tickVals = ticks || $xScale.ticks(tickNumber);\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n{#if $xScale}\n  <g class='axis x-axis'>\n    {#each tickVals as tick, i}\n      <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n        {#if gridlines !== false}\n          <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n        {/if}\n        <text y='16' text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n      </g>\n    {/each}\n    {#if baseline === true}\n      <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n    {/if}\n  </g>\n{/if}\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, yScale } = getContext('LayerCake');\n\n  export let ticks;\n  export let tickNumber = 5;\n  export let gridlines = true;\n  export let formatTick = d => d;\n\n</script>\n\n<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each $yScale.ticks(ticks || tickNumber) as tick, i}\n    <g class='tick tick-{tick}' transform='translate(0, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line x2='100%'></line>\n      {/if}\n      <text y='-4'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./components/AreaStacked.svelte","contents":"<script>\n  import { area } from 'd3-shape';\n  import { scaleOrdinal } from 'd3-scale';\n\n  import { getContext } from 'svelte';\n\n  const { data, xScale, yScale } = getContext('LayerCake');\n\n  export let seriesColors;\n  export let seriesNames;\n\n  $: colorScale = scaleOrdinal()\n    .domain(seriesNames)\n    .range(seriesColors);\n\n  $: areaGen = area()\n    .x(d => $xScale(d.data.month))\n    .y0(d => $yScale(d[0]))\n    .y1(d => $yScale(d[1]));\n</script>\n\n<g class=\"area-group\">\n  {#each $data as d}\n    <path\n      class='path-area'\n      d='{areaGen(d)}'\n      fill=\"{colorScale(d.key)}\"\n    ></path>\n  {/each}\n</g>"}],"modules":[{"title":"./data/fruit.js","contents":"/* --------------------------------------------\n *\n * Example data for stacked charts\n * from D3 documentation\n * Adapted from https://github.com/d3/d3-shape/blob/master/README.md#stack\n *\n * --------------------------------------------\n */\nexport default [\n  {month: new Date(2015, 3, 1), apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n  {month: new Date(2015, 2, 1), apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n  {month: new Date(2015, 1, 1), apples: 640, bananas: 960, cherries: 640, dates: 400},\n  {month: new Date(2015, 0, 1), apples: 320, bananas: 480, cherries: 640, dates: 400}\n];"}],"componentModules":[]}